plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.13'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "com.github.node-gradle.node" version '4.0.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation group: 'io.awspring.cloud', name: 'spring-cloud-starter-aws', version: '2.4.4'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.488'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.auth0:java-jwt:4.2.1'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.1.4'
}

tasks.named('test') {
    useJUnitPlatform()
}

// node {
//   version = '18.16.0'
//   npmVersion = '9.5.1'
//   download = true
// }

task appNpmInstall(type: NpmTask) {
    dependsOn "npmSetup"
    description = "Installs dependencies from package.json"
    workingDir = file("${projectDir}/src/main/resources/static")
    args = ["install"]
}

// React build 설정
def reactAppDir = "$projectDir/src/main/reactJs/my-app"
/*
sourceSets {
  main {
    resources {
      srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
    }
  }
}
*/

processResources {
    dependsOn "copyReactFile"
//    dependsOn "appNpmInstall"

}


task copyReactFile(type: Copy) {
    dependsOn "buildReact"
    from "$reactAppDir/build"
    //into "$buildDir/resources/main/static"
    into "$projectDir/src/main/resources/static/"
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$reactAppDir"
    inputs.dir "$reactAppDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task installReact(type: Exec) {
    workingDir "$reactAppDir"
    inputs.dir "$reactAppDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "audit", "fix"
        commandLine "npm", "install"
    }
}


